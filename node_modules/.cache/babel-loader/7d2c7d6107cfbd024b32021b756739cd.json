{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useUpdate from './useUpdate';\nimport { resolveHookState } from './util/resolveHookState';\n\nfunction useList(initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n\n  var list = useRef(resolveHookState(initialList));\n  var update = useUpdate();\n  var actions = useMemo(function () {\n    var a = {\n      set: function set(newList) {\n        list.current = resolveHookState(newList, list.current);\n        update();\n      },\n      push: function push() {\n        var items = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          items[_i] = arguments[_i];\n        }\n\n        items.length && actions.set(function (curr) {\n          return curr.concat(items);\n        });\n      },\n      updateAt: function updateAt(index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr[index] = item;\n          return arr;\n        });\n      },\n      insertAt: function insertAt(index, item) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          index > arr.length ? arr[index] = item : arr.splice(index, 0, item);\n          return arr;\n        });\n      },\n      update: function update(predicate, newItem) {\n        actions.set(function (curr) {\n          return curr.map(function (item) {\n            return predicate(item, newItem) ? newItem : item;\n          });\n        });\n      },\n      updateFirst: function updateFirst(predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 && actions.updateAt(index, newItem);\n      },\n      upsert: function upsert(predicate, newItem) {\n        var index = list.current.findIndex(function (item) {\n          return predicate(item, newItem);\n        });\n        index >= 0 ? actions.updateAt(index, newItem) : actions.push(newItem);\n      },\n      sort: function sort(compareFn) {\n        actions.set(function (curr) {\n          return curr.slice().sort(compareFn);\n        });\n      },\n      filter: function filter(callbackFn, thisArg) {\n        actions.set(function (curr) {\n          return curr.slice().filter(callbackFn, thisArg);\n        });\n      },\n      removeAt: function removeAt(index) {\n        actions.set(function (curr) {\n          var arr = curr.slice();\n          arr.splice(index, 1);\n          return arr;\n        });\n      },\n      clear: function clear() {\n        actions.set([]);\n      },\n      reset: function reset() {\n        actions.set(resolveHookState(initialList).slice());\n      }\n    };\n    /**\n     * @deprecated Use removeAt method instead\n     */\n\n    a.remove = a.removeAt;\n    return a;\n  }, []);\n  return [list.current, actions];\n}\n\nexport default useList;","map":null,"metadata":{},"sourceType":"module"}