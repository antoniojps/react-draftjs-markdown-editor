{"ast":null,"code":"import { useMemo } from 'react';\nimport useEvent from './useEvent';\n\nvar noop = function noop() {};\n\nvar createKeyPredicate = function createKeyPredicate(keyFilter) {\n  return typeof keyFilter === 'function' ? keyFilter : typeof keyFilter === 'string' ? function (event) {\n    return event.key === keyFilter;\n  } : keyFilter ? function () {\n    return true;\n  } : function () {\n    return false;\n  };\n};\n\nvar useKey = function useKey(key, fn, opts, deps) {\n  if (fn === void 0) {\n    fn = noop;\n  }\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  if (deps === void 0) {\n    deps = [key];\n  }\n\n  var _a = opts.event,\n      event = _a === void 0 ? 'keydown' : _a,\n      target = opts.target,\n      options = opts.options;\n  var useMemoHandler = useMemo(function () {\n    var predicate = createKeyPredicate(key);\n\n    var handler = function handler(handlerEvent) {\n      if (predicate(handlerEvent)) {\n        return fn(handlerEvent);\n      }\n    };\n\n    return handler;\n  }, deps);\n  useEvent(event, useMemoHandler, target, options);\n};\n\nexport default useKey;","map":null,"metadata":{},"sourceType":"module"}