{"ast":null,"code":"var scrollbarWidth = function scrollbarWidth(force) {\n  // safety check for SSR\n\n  /* istanbul ignore next */\n  if (!document) {\n    return 0;\n  } // one more safety check. If document has no body element that means script tag been\n  // included before the </body> tag, which in general means that DOM is not ready yet.\n  // Furthermore check the document's ready state in case it is presented [IE9+]\n  // any interactivity [not 'loading'] will be okay for us\n\n  /* istanbul ignore next */\n\n\n  if (!document.body || document.readyState && document.readyState === 'loading') {\n    return;\n  } // return cached value if we have some\n\n\n  if (force !== true && typeof scrollbarWidth.__cache === 'number') {\n    return scrollbarWidth.__cache;\n  }\n\n  var el = document.createElement('div');\n  var style = el.style; // for the case of weird css rules where div will not be a block element.\n\n  style.display = 'block';\n  style.position = 'absolute';\n  style.width = style.height = '100px';\n  style.left = style.top = '-999px';\n  style.overflow = 'scroll';\n  document.body.insertBefore(el, null);\n  var clientWidth = el.clientWidth; // if element still has no width it means DOM is not ready yet\n\n  /* istanbul ignore next */\n\n  if (clientWidth === 0) {\n    // remove the element and skip the caching\n    document.body.removeChild(el);\n    return;\n  } // clientWidth is the total width of the block - scrollbar width, thus, to get the scrollbar width\n  // it works well for desktop, but in mobile browsers scrollbar as absolutely positioned and i\n  // dont know ant way to determine mobile browser's scrollbar width, so for mobile that value will be always 0.\n\n\n  scrollbarWidth.__cache = 100 - clientWidth;\n  document.body.removeChild(el);\n  return scrollbarWidth.__cache;\n};\n\nexport { scrollbarWidth };","map":null,"metadata":{},"sourceType":"module"}