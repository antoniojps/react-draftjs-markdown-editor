{"ast":null,"code":"import { useCallback, useMemo, useRef, useState } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nimport { resolveHookState } from './util/resolveHookState';\nexport function useStateWithHistory(initialState, capacity, initialHistory) {\n  if (capacity === void 0) {\n    capacity = 10;\n  }\n\n  if (capacity < 1) {\n    throw new Error(\"Capacity has to be greater than 1, got '\" + capacity + \"'\");\n  }\n\n  var isFirstMount = useFirstMountState();\n\n  var _a = useState(initialState),\n      state = _a[0],\n      innerSetState = _a[1];\n\n  var history = useRef(initialHistory !== null && initialHistory !== void 0 ? initialHistory : []);\n  var historyPosition = useRef(0); // do the states manipulation only on first mount, no sense to load re-renders with useless calculations\n\n  if (isFirstMount) {\n    if (history.current.length) {\n      // if last element of history !== initial - push initial to history\n      if (history.current[history.current.length - 1] !== initialState) {\n        history.current.push(initialState);\n      } // if initial history bigger that capacity - crop the first elements out\n\n\n      if (history.current.length > capacity) {\n        history.current = history.current.slice(history.current.length - capacity);\n      }\n    } else {\n      // initiate the history with initial state\n      history.current.push(initialState);\n    }\n\n    historyPosition.current = history.current.length && history.current.length - 1;\n  }\n\n  var setState = useCallback(function (newState) {\n    innerSetState(function (currentState) {\n      newState = resolveHookState(newState); // is state has changed\n\n      if (newState !== currentState) {\n        // if current position is not the last - pop element to the right\n        if (historyPosition.current < history.current.length - 1) {\n          history.current = history.current.slice(0, historyPosition.current + 1);\n        }\n\n        historyPosition.current = history.current.push(newState) - 1; // if capacity is reached - shift first elements\n\n        if (history.current.length > capacity) {\n          history.current = history.current.slice(history.current.length - capacity);\n        }\n      }\n\n      return newState;\n    });\n  }, [state, capacity]);\n  var historyState = useMemo(function () {\n    return {\n      history: history.current,\n      position: historyPosition.current,\n      capacity: capacity,\n      back: function back(amount) {\n        if (amount === void 0) {\n          amount = 1;\n        } // don't do anything if we already at the left border\n\n\n        if (!historyPosition.current) {\n          return;\n        }\n\n        innerSetState(function () {\n          historyPosition.current -= Math.min(amount, historyPosition.current);\n          return history.current[historyPosition.current];\n        });\n      },\n      forward: function forward(amount) {\n        if (amount === void 0) {\n          amount = 1;\n        } // don't do anything if we already at the right border\n\n\n        if (historyPosition.current === history.current.length - 1) {\n          return;\n        }\n\n        innerSetState(function () {\n          historyPosition.current = Math.min(historyPosition.current + amount, history.current.length - 1);\n          return history.current[historyPosition.current];\n        });\n      },\n      go: function go(position) {\n        if (position === historyPosition.current) {\n          return;\n        }\n\n        innerSetState(function () {\n          historyPosition.current = position < 0 ? Math.max(history.current.length + position, 0) : Math.min(history.current.length - 1, position);\n          return history.current[historyPosition.current];\n        });\n      }\n    };\n  }, [state]);\n  return [state, setState, historyState];\n}","map":null,"metadata":{},"sourceType":"module"}