{"ast":null,"code":"import _slicedToArray from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/RichTextEditorFromMarkdown.js\";\n\n/* eslint-disable no-unused-vars, no-console */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RichTextEditor from \"./RichTextEditor\";\nimport { EditorState, convertToRaw, convertFromRaw, ContentBlock, genKey } from \"draft-js\";\nimport { List, Map, Repeat } from 'immutable';\nimport { draftToMarkdown, markdownToDraft } from \"markdown-draft-js\";\nimport remarkablePlugin from \"./remarkablePlugin\";\n\nvar RichTextEditorMarkdown = function RichTextEditorMarkdown(_ref) {\n  var initialMarkdown = _ref.initialMarkdown,\n      onEditorStateChange = _ref.onEditorStateChange;\n\n  var _useState = useState(EditorState.createEmpty()),\n      _useState2 = _slicedToArray(_useState, 2),\n      editorState = _useState2[0],\n      setEditorState = _useState2[1]; // convert markdown to EditorState\n\n\n  useEffect(function () {\n    var rawDraftObj = markdownToDraft(initialMarkdown, {\n      remarkablePlugins: [remarkablePlugin],\n      blockTypes: {\n        warning_open: function warning_open(item) {\n          console.log('warning_open', item);\n          return new ContentBlock({\n            key: genKey(),\n            type: 'WARNING',\n            data: item.content,\n            characterList: new List(Repeat(CharacterMetadata.create(), \" \".length)),\n            text: \" \"\n          });\n        }\n      }\n    });\n    var newContentState = convertFromRaw(rawDraftObj);\n    var newEditorState = EditorState.createWithContent(newContentState);\n    var fixSelection = EditorState.moveSelectionToEnd(newEditorState);\n    setEditorState(fixSelection);\n  }, [initialMarkdown]); // convert EditorState to markdown\n\n  var handleChange = function handleChange(newEditorState) {\n    var contentState = newEditorState.getCurrentContent();\n    var rawDraftObj = convertToRaw(contentState);\n    var markdownFromEditorState = draftToMarkdown(rawDraftObj, {\n      entityItems: {\n        WARNING: {\n          open: function open(entity) {\n            return \"\";\n          },\n          close: function close(entity) {\n            console.log(entity);\n            return \"\\n<warning>\\n  \".concat(entity.data, \"\\n</warning>\");\n          }\n        }\n      }\n    });\n    setEditorState(newEditorState);\n    onEditorStateChange(markdownFromEditorState);\n  };\n\n  return React.createElement(RichTextEditor, {\n    editorState: editorState,\n    onEditorStateChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n};\n\nRichTextEditorMarkdown.propTypes = {\n  editorState: PropTypes.shape({}),\n  initialMarkdown: PropTypes.string,\n  onEditorStateChange: PropTypes.func\n};\nRichTextEditorMarkdown.defaultProps = {\n  editorState: EditorState.createEmpty(),\n  initialMarkdown: \"\",\n  onEditorStateChange: function onEditorStateChange() {\n    return null;\n  }\n};\nexport default RichTextEditorMarkdown;","map":{"version":3,"sources":["/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/RichTextEditorFromMarkdown.js"],"names":["React","useState","useEffect","PropTypes","RichTextEditor","EditorState","convertToRaw","convertFromRaw","ContentBlock","genKey","List","Map","Repeat","draftToMarkdown","markdownToDraft","remarkablePlugin","RichTextEditorMarkdown","initialMarkdown","onEditorStateChange","createEmpty","editorState","setEditorState","rawDraftObj","remarkablePlugins","blockTypes","warning_open","item","console","log","key","type","data","content","characterList","CharacterMetadata","create","length","text","newContentState","newEditorState","createWithContent","fixSelection","moveSelectionToEnd","handleChange","contentState","getCurrentContent","markdownFromEditorState","entityItems","WARNING","open","entity","close","propTypes","shape","string","func","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars, no-console */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RichTextEditor from \"./RichTextEditor\";\nimport { EditorState, convertToRaw, convertFromRaw, ContentBlock, genKey, } from \"draft-js\";\nimport { List, Map, Repeat } from 'immutable'\nimport { draftToMarkdown, markdownToDraft } from \"markdown-draft-js\";\nimport remarkablePlugin from \"./remarkablePlugin\";\n\nconst RichTextEditorMarkdown = ({ initialMarkdown, onEditorStateChange }) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // convert markdown to EditorState\n  useEffect(() => {\n    const rawDraftObj = markdownToDraft(initialMarkdown, {\n      remarkablePlugins: [remarkablePlugin],\n      blockTypes: {\n        warning_open: function (item) {\n          console.log('warning_open', item)\n          return new ContentBlock({\n            key: genKey(),\n            type: 'WARNING',\n            data: item.content,\n            characterList: new List(Repeat(CharacterMetadata.create(), \" \".length)),\n            text: \" \"\n          });\n        },\n      }\n    });\n    const newContentState = convertFromRaw(rawDraftObj);\n    const newEditorState = EditorState.createWithContent(newContentState);\n    const fixSelection = EditorState.moveSelectionToEnd(newEditorState);\n    setEditorState(fixSelection);\n  }, [initialMarkdown]);\n\n  // convert EditorState to markdown\n  const handleChange = newEditorState => {\n    const contentState = newEditorState.getCurrentContent();\n    const rawDraftObj = convertToRaw(contentState);\n    const markdownFromEditorState = draftToMarkdown(rawDraftObj, {\n      entityItems: {\n        WARNING: {\n          open: function(entity) {\n            return ``;\n          },\n          close: function(entity) {\n            console.log(entity);\n            return `\n<warning>\n  ${entity.data}\n</warning>`;\n          }\n        }\n      }\n    });\n\n    setEditorState(newEditorState);\n    onEditorStateChange(markdownFromEditorState);\n  };\n\n  return (\n    <RichTextEditor\n      editorState={editorState}\n      onEditorStateChange={handleChange}\n    />\n  );\n};\n\nRichTextEditorMarkdown.propTypes = {\n  editorState: PropTypes.shape({}),\n  initialMarkdown: PropTypes.string,\n  onEditorStateChange: PropTypes.func\n};\n\nRichTextEditorMarkdown.defaultProps = {\n  editorState: EditorState.createEmpty(),\n  initialMarkdown: \"\",\n  onEditorStateChange: () => null\n};\n\nexport default RichTextEditorMarkdown;\n"]},"metadata":{},"sourceType":"module"}