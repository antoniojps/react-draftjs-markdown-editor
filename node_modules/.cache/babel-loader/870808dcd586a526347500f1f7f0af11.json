{"ast":null,"code":"import _slicedToArray from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoniojps/Documents/draftjs-markdown-editor/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nimport RichTextEditorFromMarkdown from \"./RichTextEditor/RichTextEditorFromMarkdown\";\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      markdown = _useState2[0],\n      setMarkdown = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      initialMarkdown = _useState4[0],\n      setInitialMarkdown = _useState4[1];\n\n  var handleChange = function handleChange(newMarkdown) {\n    setMarkdown(newMarkdown);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"RichTextEditor\"), React.createElement(RichTextEditorFromMarkdown, {\n    initialMarkdown: initialMarkdown,\n    onEditorStateChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Markdown\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setInitialMarkdown(markdown);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Convert markdown to draft\"), React.createElement(\"textarea\", {\n    onChange: function onChange(event) {\n      return setMarkdown(event.target.value);\n    },\n    value: markdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/antoniojps/Documents/draftjs-markdown-editor/src/App.js"],"names":["React","useState","RichTextEditorFromMarkdown","App","markdown","setMarkdown","initialMarkdown","setInitialMarkdown","handleChange","newMarkdown","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;AACA,OAAOC,0BAAP,MAAuC,6CAAvC;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACIF,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,MACrBG,QADqB;AAAA,MACXC,WADW;;AAAA,mBAEkBJ,QAAQ,CAAC,EAAD,CAF1B;AAAA;AAAA,MAErBK,eAFqB;AAAA,MAEJC,kBAFI;;AAI5B,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,WAAW,EAAI;AAClCJ,IAAAA,WAAW,CAACI,WAAD,CAAX;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,oBAAC,0BAAD;AACE,IAAA,eAAe,EAAEH,eADnB;AAEE,IAAA,mBAAmB,EAAEE,YAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,EAOE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMD,kBAAkB,CAACH,QAAD,CAAxB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAPF,EAUE;AACE,IAAA,QAAQ,EAAE,kBAAAM,KAAK;AAAA,aAAIL,WAAW,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAAA,KADjB;AAEE,IAAA,KAAK,EAAER,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAiBD","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport RichTextEditorFromMarkdown from \"./RichTextEditor/RichTextEditorFromMarkdown\";\n\nexport default function App() {\n  const [markdown, setMarkdown] = useState(\"\");\n  const [initialMarkdown, setInitialMarkdown] = useState(\"\");\n\n  const handleChange = newMarkdown => {\n    setMarkdown(newMarkdown);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>RichTextEditor</h1>\n      <RichTextEditorFromMarkdown\n        initialMarkdown={initialMarkdown}\n        onEditorStateChange={handleChange}\n      />\n      <h1>Markdown</h1>\n      <button onClick={() => setInitialMarkdown(markdown)}>\n        Convert markdown to draft\n      </button>\n      <textarea\n        onChange={event => setMarkdown(event.target.value)}\n        value={markdown}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}