{"ast":null,"code":"var counter = 0;\nvar buckets = {};\n\nvar setHarmonicInterval = function setHarmonicInterval(fn, ms) {\n  var _a;\n\n  var id = counter++;\n\n  if (buckets[ms]) {\n    buckets[ms].listeners[id] = fn;\n  } else {\n    var timer = setInterval(function () {\n      var listeners = buckets[ms].listeners;\n      var didThrow = false;\n      var lastError;\n\n      for (var _i = 0, _a = Object.values(listeners); _i < _a.length; _i++) {\n        var listener = _a[_i];\n\n        try {\n          listener();\n        } catch (error) {\n          didThrow = true;\n          lastError = error;\n        }\n      }\n\n      if (didThrow) throw lastError;\n    }, ms);\n    buckets[ms] = {\n      ms: ms,\n      timer: timer,\n      listeners: (_a = {}, _a[id] = fn, _a)\n    };\n  }\n\n  return {\n    bucket: buckets[ms],\n    id: id\n  };\n};\n\nvar clearHarmonicInterval = function clearHarmonicInterval(_a) {\n  var bucket = _a.bucket,\n      id = _a.id;\n  delete bucket.listeners[id];\n  var hasListeners = false;\n\n  for (var listener in bucket.listeners) {\n    hasListeners = true;\n    break;\n  }\n\n  if (!hasListeners) {\n    clearInterval(bucket.timer);\n    delete buckets[bucket.ms];\n  }\n};\n\nexport { clearHarmonicInterval, setHarmonicInterval };","map":null,"metadata":{},"sourceType":"module"}