{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useRef } from 'react';\nimport useUpdate from './useUpdate';\n\nvar useGetSetState = function useGetSetState(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof initialState !== 'object') {\n      console.error('useGetSetState initial state must be an object.');\n    }\n  }\n\n  var update = useUpdate();\n  var state = useRef(__assign({}, initialState));\n  var get = useCallback(function () {\n    return state.current;\n  }, []);\n  var set = useCallback(function (patch) {\n    if (!patch) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof patch !== 'object') {\n        console.error('useGetSetState setter patch must be an object.');\n      }\n    }\n\n    Object.assign(state.current, patch);\n    update();\n  }, []);\n  return [get, set];\n};\n\nexport default useGetSetState;","map":null,"metadata":{},"sourceType":"module"}