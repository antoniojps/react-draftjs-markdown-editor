{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport useMountedState from './useMountedState';\nvar useState = React.useState,\n    useMemo = React.useMemo,\n    useCallback = React.useCallback,\n    useEffect = React.useEffect;\n\nvar noop = function noop() {};\n/*\nconst defaultState: DropAreaState = {\n  over: false,\n};\n*/\n\n\nvar createProcess = function createProcess(options, mounted) {\n  return function (dataTransfer, event) {\n    var uri = dataTransfer.getData('text/uri-list');\n\n    if (uri) {\n      (options.onUri || noop)(uri, event);\n      return;\n    }\n\n    if (dataTransfer.files && dataTransfer.files.length) {\n      (options.onFiles || noop)(Array.from(dataTransfer.files), event);\n      return;\n    }\n\n    if (dataTransfer.items && dataTransfer.items.length) {\n      dataTransfer.items[0].getAsString(function (text) {\n        if (mounted) {\n          (options.onText || noop)(text, event);\n        }\n      });\n    }\n  };\n};\n\nvar useDrop = function useDrop(options, args) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (args === void 0) {\n    args = [];\n  }\n\n  var onFiles = options.onFiles,\n      onText = options.onText,\n      onUri = options.onUri;\n  var isMounted = useMountedState();\n\n  var _a = useState(false),\n      over = _a[0],\n      setOverRaw = _a[1];\n\n  var setOver = useCallback(setOverRaw, []);\n  var process = useMemo(function () {\n    return createProcess(options, isMounted());\n  }, [onFiles, onText, onUri]);\n  useEffect(function () {\n    var onDragOver = function onDragOver(event) {\n      event.preventDefault();\n      setOver(true);\n    };\n\n    var onDragEnter = function onDragEnter(event) {\n      event.preventDefault();\n      setOver(true);\n    };\n\n    var onDragLeave = function onDragLeave() {\n      setOver(false);\n    };\n\n    var onDragExit = function onDragExit() {\n      setOver(false);\n    };\n\n    var onDrop = function onDrop(event) {\n      event.preventDefault();\n      setOver(false);\n      process(event.dataTransfer, event);\n    };\n\n    var onPaste = function onPaste(event) {\n      process(event.clipboardData, event);\n    };\n\n    document.addEventListener('dragover', onDragOver);\n    document.addEventListener('dragenter', onDragEnter);\n    document.addEventListener('dragleave', onDragLeave);\n    document.addEventListener('dragexit', onDragExit);\n    document.addEventListener('drop', onDrop);\n\n    if (onText) {\n      document.addEventListener('paste', onPaste);\n    }\n\n    return function () {\n      document.removeEventListener('dragover', onDragOver);\n      document.removeEventListener('dragenter', onDragEnter);\n      document.removeEventListener('dragleave', onDragLeave);\n      document.removeEventListener('dragexit', onDragExit);\n      document.removeEventListener('drop', onDrop);\n      document.removeEventListener('paste', onPaste);\n    };\n  }, __spreadArrays([process], args));\n  return {\n    over: over\n  };\n};\n\nexport default useDrop;","map":null,"metadata":{},"sourceType":"module"}