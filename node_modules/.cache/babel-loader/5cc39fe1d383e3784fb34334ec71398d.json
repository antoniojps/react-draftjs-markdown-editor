{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { throttle } from 'throttle-debounce';\nimport { off, on } from './util';\nvar defaultEvents = ['mousemove', 'mousedown', 'resize', 'keydown', 'touchstart', 'wheel'];\nvar oneMinute = 60e3;\n\nvar useIdle = function useIdle(ms, initialState, events) {\n  if (ms === void 0) {\n    ms = oneMinute;\n  }\n\n  if (initialState === void 0) {\n    initialState = false;\n  }\n\n  if (events === void 0) {\n    events = defaultEvents;\n  }\n\n  var _a = useState(initialState),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var mounted = true;\n    var timeout;\n    var localState = state;\n\n    var set = function set(newState) {\n      if (mounted) {\n        localState = newState;\n        setState(newState);\n      }\n    };\n\n    var onEvent = throttle(50, function () {\n      if (localState) {\n        set(false);\n      }\n\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        return set(true);\n      }, ms);\n    });\n\n    var onVisibility = function onVisibility() {\n      if (!document.hidden) {\n        onEvent();\n      }\n    };\n\n    for (var i = 0; i < events.length; i++) {\n      on(window, events[i], onEvent);\n    }\n\n    on(document, 'visibilitychange', onVisibility);\n    timeout = setTimeout(function () {\n      return set(true);\n    }, ms);\n    return function () {\n      mounted = false;\n\n      for (var i = 0; i < events.length; i++) {\n        off(window, events[i], onEvent);\n      }\n\n      off(document, 'visibilitychange', onVisibility);\n    };\n  }, [ms, events]);\n  return state;\n};\n\nexport default useIdle;","map":null,"metadata":{},"sourceType":"module"}