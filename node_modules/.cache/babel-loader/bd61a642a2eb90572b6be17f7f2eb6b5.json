{"ast":null,"code":"import { useLayoutEffect } from 'react';\n\nvar isFocusedElementEditable = function isFocusedElementEditable() {\n  var activeElement = document.activeElement,\n      body = document.body;\n\n  if (!activeElement) {\n    return false;\n  } // If not element has focus, we assume it is not editable, too.\n\n\n  if (activeElement === body) {\n    return false;\n  } // Assume <input> and <textarea> elements are editable.\n\n\n  switch (activeElement.tagName) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      return true;\n  } // Check if any other focused element id editable.\n\n\n  return activeElement.hasAttribute('contenteditable');\n};\n\nvar isTypedCharGood = function isTypedCharGood(_a) {\n  var keyCode = _a.keyCode,\n      metaKey = _a.metaKey,\n      ctrlKey = _a.ctrlKey,\n      altKey = _a.altKey;\n\n  if (metaKey || ctrlKey || altKey) {\n    return false;\n  } // 0...9\n\n\n  if (keyCode >= 48 && keyCode <= 57) {\n    return true;\n  } // a...z\n\n\n  if (keyCode >= 65 && keyCode <= 90) {\n    return true;\n  } // All other keys.\n\n\n  return false;\n};\n\nvar useStartTyping = function useStartTyping(onStartTyping) {\n  useLayoutEffect(function () {\n    var keydown = function keydown(event) {\n      !isFocusedElementEditable() && isTypedCharGood(event) && onStartTyping(event);\n    };\n\n    document.addEventListener('keydown', keydown);\n    return function () {\n      document.removeEventListener('keydown', keydown);\n    };\n  }, []);\n};\n\nexport default useStartTyping;","map":null,"metadata":{},"sourceType":"module"}