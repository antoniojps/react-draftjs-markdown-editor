{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/ToolbarOption.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  left: 270px;\\n  top: 70px;\\n  width: auto;\\n  height: auto;\\n  padding: 1rem;\\n  background-color: white;\\n  border: 4px solid red;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useRef } from \"react\";\nimport { EditorState, AtomicBlockUtils, BlockMapBuilder, CharacterMetadata, ContentBlock, Modifier, genKey } from \"draft-js\";\nimport PropTypes from \"prop-types\";\nimport { useToggle, useClickAway } from \"react-use\";\nimport styled from \"styled-components\";\nimport { List, Repeat } from 'immutable';\n\nvar insertAtomicBlockWithData = function insertAtomicBlockWithData(editorState, entityKey, blockData, character) {\n  var contentState = editorState.getCurrentContent();\n  var selectionState = editorState.getSelection();\n  var afterRemovalContentState = Modifier.removeRange(contentState, selectionState, 'backwarad');\n  var targetSelectionState = afterRemovalContentState.getSelectionAfter();\n  var afterSplitContentState = Modifier.splitBlock(afterRemovalContentState, targetSelectionState);\n  var insertionTarget = afterSplitContentState.getSelectionAfter();\n  var asAtomicBlock = Modifier.setBlockType(afterSplitContentState, insertionTarget, 'atomic');\n  var charData = CharacterMetadata.create({\n    entity: entityKey\n  });\n  var fragmentArray = [new ContentBlock({\n    key: genKey(),\n    type: 'atomic',\n    text: character,\n    characterList: List(Repeat(charData, character.length)),\n    data: blockData\n  }), new ContentBlock({\n    key: genKey(),\n    type: 'unstyled',\n    text: '',\n    characterList: List()\n  })];\n  var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n  var withAtomicBlock = Modifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n  var newContentState = withAtomicBlock.merge({\n    selectionBefore: selectionState,\n    selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n  });\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}; // generates markdown text by type of entity\n\n\nvar generateTextByBlockType = function generateTextByBlockType(type, data) {\n  if (type === 'CAROUSEL') {\n    var carousel = \"\\n<carousel>\\n  \".concat(data.children, \"\\n</carousel>\");\n    return carousel;\n  }\n\n  return ' ';\n};\n\nvar insertBlock = function insertBlock(editorState, onChange, data) {\n  var type = data.type,\n      props = data.props;\n  var text = generateTextByBlockType(type, data);\n  var newEditorStateWithBlock = insertAtomicBlockWithData(editorState, null, data, text);\n  onChange(newEditorStateWithBlock);\n};\n\nexport var ToolbarOption = function ToolbarOption(_ref) {\n  var onChange = _ref.onChange,\n      editorState = _ref.editorState,\n      initialValues = _ref.initialValues;\n\n  var _useToggle = useToggle(),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      isOpen = _useToggle2[0],\n      toggle = _useToggle2[1];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useRef(null);\n  useClickAway(ref, function () {\n    if (isOpen) toggle();\n  });\n\n  var handleClick = function handleClick() {\n    toggle();\n  };\n\n  var addBlock = function addBlock() {\n    toggle();\n    insertBlock(editorState, onChange, {\n      type: \"WARNING\",\n      props: {\n        children: value\n      }\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"rdw-list-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Add Warning\")), isOpen && React.createElement(Modal, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: function onChange(event) {\n      return setValue(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addBlock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Add\")));\n};\nvar Modal = styled.div(_templateObject());\nToolbarOption.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  editorState: PropTypes.shape({}).isRequired,\n  initialValues: PropTypes.shape({})\n};\nToolbarOption.defaultProps = {\n  initialValues: {}\n};\nexport default ToolbarOption;","map":{"version":3,"sources":["/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/ToolbarOption.js"],"names":["React","useState","useRef","EditorState","AtomicBlockUtils","BlockMapBuilder","CharacterMetadata","ContentBlock","Modifier","genKey","PropTypes","useToggle","useClickAway","styled","List","Repeat","insertAtomicBlockWithData","editorState","entityKey","blockData","character","contentState","getCurrentContent","selectionState","getSelection","afterRemovalContentState","removeRange","targetSelectionState","getSelectionAfter","afterSplitContentState","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","fragmentArray","key","type","text","characterList","length","data","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContentState","merge","selectionBefore","selectionAfter","set","push","generateTextByBlockType","carousel","children","insertBlock","onChange","props","newEditorStateWithBlock","ToolbarOption","initialValues","isOpen","toggle","value","setValue","ref","handleClick","addBlock","event","target","Modal","div","propTypes","func","isRequired","shape","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { EditorState, AtomicBlockUtils,   BlockMapBuilder,\n  CharacterMetadata,\n  ContentBlock,\n  Modifier,\n  genKey } from \"draft-js\";\nimport PropTypes from \"prop-types\";\nimport { useToggle, useClickAway } from \"react-use\";\nimport styled from \"styled-components\";\n\nimport { List, Repeat } from 'immutable'\n\nconst insertAtomicBlockWithData = (editorState, entityKey, blockData, character) => {\n  const contentState = editorState.getCurrentContent()\n  const selectionState = editorState.getSelection()\n\n  const afterRemovalContentState = Modifier.removeRange(\n    contentState,\n    selectionState,\n    'backwarad'\n  )\n\n  const targetSelectionState = afterRemovalContentState.getSelectionAfter()\n  const afterSplitContentState = Modifier.splitBlock(afterRemovalContentState, targetSelectionState)\n  const insertionTarget = afterSplitContentState.getSelectionAfter()\n\n  const asAtomicBlock = Modifier.setBlockType(\n    afterSplitContentState,\n    insertionTarget,\n    'atomic'\n  )\n\n  const charData = CharacterMetadata.create({ entity: entityKey })\n\n  const fragmentArray = [\n    new ContentBlock({\n      key: genKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length)),\n      data: blockData\n    }),\n    new ContentBlock({\n      key: genKey(),\n      type: 'unstyled',\n      text: '',\n      characterList: List()\n    })\n  ]\n\n  const fragment = BlockMapBuilder.createFromArray(fragmentArray)\n\n  const withAtomicBlock = Modifier.replaceWithFragment(\n    asAtomicBlock,\n    insertionTarget, fragment\n  )\n\n  const newContentState = withAtomicBlock.merge({\n    selectionBefore: selectionState,\n    selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n  })\n\n  return EditorState.push(editorState, newContentState, 'insert-fragment')\n}\n\n// generates markdown text by type of entity\nconst generateTextByBlockType = (type, data) => {\n  if (type === 'CAROUSEL') {\n    const carousel = `\n<carousel>\n  ${data.children}\n</carousel>`\n    return carousel\n  }\n  return ' '\n}\n\nconst insertBlock = (editorState, onChange, data) => {\n  const { type, props } = data\n  const text = generateTextByBlockType(type, data)\n\n  const newEditorStateWithBlock = insertAtomicBlockWithData(\n    editorState,\n    null,\n    data,\n    text,\n  );\n  onChange(newEditorStateWithBlock);\n};\n\nexport const ToolbarOption = ({ onChange, editorState, initialValues }) => {\n  const [isOpen, toggle] = useToggle();\n  const [value, setValue] = useState();\n\n  const ref = useRef(null);\n  useClickAway(ref, () => {\n    if (isOpen) toggle();\n  });\n\n  const handleClick = () => {\n    toggle();\n  };\n\n  const addBlock = () => {\n    toggle();\n    insertBlock(editorState, onChange, { type: \"WARNING\", props: { children: value } });\n  };\n\n  return (\n    <>\n      <div className=\"rdw-list-wrapper\">\n        <button onClick={handleClick}>Add Warning</button>\n      </div>\n      {isOpen && (\n        <Modal ref={ref}>\n          <input\n            type=\"text\"\n            value={value}\n            onChange={event => setValue(event.target.value)}\n          />\n          <button onClick={addBlock}>Add</button>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nconst Modal = styled.div`\n  position: absolute;\n  left: 270px;\n  top: 70px;\n  width: auto;\n  height: auto;\n  padding: 1rem;\n  background-color: white;\n  border: 4px solid red;\n`;\n\nToolbarOption.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  editorState: PropTypes.shape({}).isRequired,\n  initialValues: PropTypes.shape({})\n};\n\nToolbarOption.defaultProps = {\n  initialValues: {}\n};\n\nexport default ToolbarOption;\n"]},"metadata":{},"sourceType":"module"}