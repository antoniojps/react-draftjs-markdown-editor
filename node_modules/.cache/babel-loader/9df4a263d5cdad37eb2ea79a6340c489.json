{"ast":null,"code":"import { useCallback, useRef, useState } from 'react';\nimport useUpdateEffect from './useUpdateEffect';\n\nfunction composeMiddleware(chain) {\n  return function (context, dispatch) {\n    return chain.reduceRight(function (res, middleware) {\n      return middleware(context)(res);\n    }, dispatch);\n  };\n}\n\nvar createReducer = function createReducer() {\n  var middlewares = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    middlewares[_i] = arguments[_i];\n  }\n\n  var composedMiddleware = composeMiddleware(middlewares);\n  return function (reducer, initialState, initializer) {\n    if (initializer === void 0) {\n      initializer = function initializer(value) {\n        return value;\n      };\n    }\n\n    var ref = useRef(initializer(initialState));\n\n    var _a = useState(ref.current),\n        setState = _a[1];\n\n    var dispatch = useCallback(function (action) {\n      ref.current = reducer(ref.current, action);\n      setState(ref.current);\n      return action;\n    }, [reducer]);\n    var dispatchRef = useRef(composedMiddleware({\n      getState: function getState() {\n        return ref.current;\n      },\n      dispatch: function dispatch() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return dispatchRef.current.apply(dispatchRef, args);\n      }\n    }, dispatch));\n    useUpdateEffect(function () {\n      dispatchRef.current = composedMiddleware({\n        getState: function getState() {\n          return ref.current;\n        },\n        dispatch: function dispatch() {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          return dispatchRef.current.apply(dispatchRef, args);\n        }\n      }, dispatch);\n    }, [dispatch]);\n    return [ref.current, dispatchRef.current];\n  };\n};\n\nexport default createReducer;","map":null,"metadata":{},"sourceType":"module"}