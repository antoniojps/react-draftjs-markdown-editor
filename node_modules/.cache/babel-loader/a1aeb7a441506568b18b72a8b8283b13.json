{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isClient } from './util';\n\nvar useLocalStorage = function useLocalStorage(key, initialValue, options) {\n  if (!isClient) {\n    return [initialValue, function () {}];\n  } // Use provided serializer/deserializer or the default ones\n\n\n  var serializer = options ? options.raw ? String : options.serializer : JSON.stringify;\n  var deserializer = options ? options.raw ? String : options.deserializer : JSON.parse;\n\n  var _a = useState(function () {\n    try {\n      var localStorageValue = localStorage.getItem(key);\n\n      if (localStorageValue !== null) {\n        return deserializer(localStorageValue);\n      } else {\n        initialValue && localStorage.setItem(key, serializer(initialValue));\n        return initialValue;\n      }\n    } catch (_a) {\n      // If user is in private mode or has storage restriction\n      // localStorage can throw. JSON.parse and JSON.stringify\n      // can throw, too.\n      return initialValue;\n    }\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    try {\n      localStorage.setItem(key, serializer(state));\n    } catch (_a) {// If user is in private mode or has storage restriction\n      // localStorage can throw. Also JSON.stringify can throw.\n    }\n  }, [state]);\n  return [state, setState];\n};\n\nexport default useLocalStorage;","map":null,"metadata":{},"sourceType":"module"}