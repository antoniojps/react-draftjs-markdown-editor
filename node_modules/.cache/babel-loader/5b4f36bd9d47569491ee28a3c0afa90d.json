{"ast":null,"code":"import { useLayoutEffect, useState } from 'react';\nimport screenfull from 'screenfull';\n\nvar noop = function noop() {};\n\nvar useFullscreen = function useFullscreen(ref, on, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var video = options.video,\n      _a = options.onClose,\n      onClose = _a === void 0 ? noop : _a;\n\n  var _b = useState(on),\n      isFullscreen = _b[0],\n      setIsFullscreen = _b[1];\n\n  useLayoutEffect(function () {\n    if (!on) {\n      return;\n    }\n\n    if (!ref.current) {\n      return;\n    }\n\n    var onWebkitEndFullscreen = function onWebkitEndFullscreen() {\n      video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      onClose();\n    };\n\n    var onChange = function onChange() {\n      if (screenfull.isEnabled) {\n        var isScreenfullFullscreen = screenfull.isFullscreen;\n        setIsFullscreen(isScreenfullFullscreen);\n\n        if (!isScreenfullFullscreen) {\n          onClose();\n        }\n      }\n    };\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(ref.current);\n        setIsFullscreen(true);\n      } catch (error) {\n        onClose(error);\n        setIsFullscreen(false);\n      }\n\n      screenfull.on('change', onChange);\n    } else if (video && video.current && video.current.webkitEnterFullscreen) {\n      video.current.webkitEnterFullscreen();\n      video.current.addEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      setIsFullscreen(true);\n    } else {\n      onClose();\n      setIsFullscreen(false);\n    }\n\n    return function () {\n      setIsFullscreen(false);\n\n      if (screenfull.isEnabled) {\n        try {\n          screenfull.off('change', onChange);\n          screenfull.exit();\n        } catch (_a) {}\n      } else if (video && video.current && video.current.webkitExitFullscreen) {\n        video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n        video.current.webkitExitFullscreen();\n      }\n    };\n  }, [on, video, ref]);\n  return isFullscreen;\n};\n\nexport default useFullscreen;","map":null,"metadata":{},"sourceType":"module"}