{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { isClient, off, on } from './util';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\n\nvar noop = function noop() {};\n\nvar useSlider = function useSlider(ref, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var isMounted = useMountedState();\n  var isSliding = useRef(false);\n  var frame = useRef(0);\n\n  var _a = useSetState({\n    isSliding: false,\n    value: 0\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    if (isClient) {\n      var styles = options.styles === undefined ? true : options.styles;\n      var reverse_1 = options.reverse === undefined ? false : options.reverse;\n\n      if (ref.current && styles) {\n        ref.current.style.userSelect = 'none';\n      }\n\n      var startScrubbing_1 = function startScrubbing_1() {\n        if (!isSliding.current && isMounted()) {\n          (options.onScrubStart || noop)();\n          isSliding.current = true;\n          setState({\n            isSliding: true\n          });\n          bindEvents_1();\n        }\n      };\n\n      var stopScrubbing_1 = function stopScrubbing_1() {\n        if (isSliding.current && isMounted()) {\n          (options.onScrubStop || noop)();\n          isSliding.current = false;\n          setState({\n            isSliding: false\n          });\n          unbindEvents_1();\n        }\n      };\n\n      var onMouseDown_1 = function onMouseDown_1(event) {\n        startScrubbing_1();\n        onMouseMove_1(event);\n      };\n\n      var onMouseMove_1 = options.vertical ? function (event) {\n        return onScrub_1(event.clientY);\n      } : function (event) {\n        return onScrub_1(event.clientX);\n      };\n\n      var onTouchStart_1 = function onTouchStart_1(event) {\n        startScrubbing_1();\n        onTouchMove_1(event);\n      };\n\n      var onTouchMove_1 = options.vertical ? function (event) {\n        return onScrub_1(event.changedTouches[0].clientY);\n      } : function (event) {\n        return onScrub_1(event.changedTouches[0].clientX);\n      };\n\n      var bindEvents_1 = function bindEvents_1() {\n        on(document, 'mousemove', onMouseMove_1);\n        on(document, 'mouseup', stopScrubbing_1);\n        on(document, 'touchmove', onTouchMove_1);\n        on(document, 'touchend', stopScrubbing_1);\n      };\n\n      var unbindEvents_1 = function unbindEvents_1() {\n        off(document, 'mousemove', onMouseMove_1);\n        off(document, 'mouseup', stopScrubbing_1);\n        off(document, 'touchmove', onTouchMove_1);\n        off(document, 'touchend', stopScrubbing_1);\n      };\n\n      var onScrub_1 = function onScrub_1(clientXY) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n          if (isMounted() && ref.current) {\n            var rect = ref.current.getBoundingClientRect();\n            var pos = options.vertical ? rect.top : rect.left;\n            var length_1 = options.vertical ? rect.height : rect.width; // Prevent returning 0 when element is hidden by CSS\n\n            if (!length_1) {\n              return;\n            }\n\n            var value = (clientXY - pos) / length_1;\n\n            if (value > 1) {\n              value = 1;\n            } else if (value < 0) {\n              value = 0;\n            }\n\n            if (reverse_1) {\n              value = 1 - value;\n            }\n\n            setState({\n              value: value\n            });\n            (options.onScrub || noop)(value);\n          }\n        });\n      };\n\n      on(ref.current, 'mousedown', onMouseDown_1);\n      on(ref.current, 'touchstart', onTouchStart_1);\n      return function () {\n        off(ref.current, 'mousedown', onMouseDown_1);\n        off(ref.current, 'touchstart', onTouchStart_1);\n      };\n    } else {\n      return undefined;\n    }\n  }, [ref, options.vertical]);\n  return state;\n};\n\nexport default useSlider;","map":null,"metadata":{},"sourceType":"module"}