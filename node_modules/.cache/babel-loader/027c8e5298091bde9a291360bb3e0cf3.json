{"ast":null,"code":"import _slicedToArray from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/RichTextEditorFromMarkdown.js\";\n\n/* eslint-disable no-unused-vars, no-console */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RichTextEditor from \"./RichTextEditor\";\nimport { EditorState, convertToRaw, convertFromRaw, CharacterMetadata, ContentBlock, genKey } from \"draft-js\";\nimport { List, Map, Repeat } from 'immutable';\nimport { draftToMarkdown, markdownToDraft } from \"markdown-draft-js\";\nimport remarkablePlugin from \"./remarkablePlugin\";\n\nvar RichTextEditorMarkdown = function RichTextEditorMarkdown(_ref) {\n  var initialMarkdown = _ref.initialMarkdown,\n      onEditorStateChange = _ref.onEditorStateChange;\n\n  var _useState = useState(EditorState.createEmpty()),\n      _useState2 = _slicedToArray(_useState, 2),\n      editorState = _useState2[0],\n      setEditorState = _useState2[1]; // convert markdown to EditorState\n\n\n  useEffect(function () {\n    var rawDraftObj = markdownToDraft(initialMarkdown, {\n      remarkablePlugins: [remarkablePlugin],\n      blockTypes: {\n        warning_open: function warning_open(item) {\n          console.log('block type', item);\n          var charData = CharacterMetadata.create();\n          var text = ' ';\n          console.log(new ContentBlock({\n            key: genKey(),\n            type: 'atomic',\n            depth: 0,\n            text: text,\n            characterList: List(Repeat(charData, text.length)),\n            inlineStyleRanges: List()\n          }));\n          return new ContentBlock({\n            key: genKey(),\n            type: 'atomic',\n            depth: 0,\n            text: text,\n            characterList: List(Repeat(charData, text.length)),\n            inlineStyleRanges: List()\n          });\n        }\n      },\n      blockEntities: {\n        warning_open: function warning_open(item) {\n          console.log('entitie', item);\n          return {\n            type: 'WARNING',\n            mutability: 'IMMUTABLE',\n            data: item\n          };\n        }\n      }\n    });\n    var newContentState = convertFromRaw(rawDraftObj);\n    var newEditorState = EditorState.createWithContent(newContentState);\n    var fixSelection = EditorState.moveSelectionToEnd(newEditorState);\n    setEditorState(fixSelection);\n  }, [initialMarkdown]); // convert EditorState to markdown\n\n  var handleChange = function handleChange(newEditorState) {\n    var contentState = newEditorState.getCurrentContent();\n    var rawDraftObj = convertToRaw(contentState);\n    console.log({\n      rawDraftObj: rawDraftObj\n    });\n    var markdownFromEditorState = draftToMarkdown(rawDraftObj, {\n      entityItems: {\n        WARNING: {\n          open: function open(entity) {\n            return \"\";\n          },\n          close: function close(entity) {\n            console.log(entity);\n            return \"\\n<warning>\\n  \".concat(entity.data, \"\\n</warning>\");\n          }\n        }\n      }\n    });\n    setEditorState(newEditorState);\n    onEditorStateChange(markdownFromEditorState);\n  };\n\n  return React.createElement(RichTextEditor, {\n    editorState: editorState,\n    onEditorStateChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  });\n};\n\nRichTextEditorMarkdown.propTypes = {\n  editorState: PropTypes.shape({}),\n  initialMarkdown: PropTypes.string,\n  onEditorStateChange: PropTypes.func\n};\nRichTextEditorMarkdown.defaultProps = {\n  editorState: EditorState.createEmpty(),\n  initialMarkdown: \"\",\n  onEditorStateChange: function onEditorStateChange() {\n    return null;\n  }\n};\nexport default RichTextEditorMarkdown;","map":{"version":3,"sources":["/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/RichTextEditorFromMarkdown.js"],"names":["React","useState","useEffect","PropTypes","RichTextEditor","EditorState","convertToRaw","convertFromRaw","CharacterMetadata","ContentBlock","genKey","List","Map","Repeat","draftToMarkdown","markdownToDraft","remarkablePlugin","RichTextEditorMarkdown","initialMarkdown","onEditorStateChange","createEmpty","editorState","setEditorState","rawDraftObj","remarkablePlugins","blockTypes","warning_open","item","console","log","charData","create","text","key","type","depth","characterList","length","inlineStyleRanges","blockEntities","mutability","data","newContentState","newEditorState","createWithContent","fixSelection","moveSelectionToEnd","handleChange","contentState","getCurrentContent","markdownFromEditorState","entityItems","WARNING","open","entity","close","propTypes","shape","string","func","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars, no-console */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RichTextEditor from \"./RichTextEditor\";\nimport { EditorState, convertToRaw, convertFromRaw, CharacterMetadata,  ContentBlock, genKey, } from \"draft-js\";\nimport { List, Map, Repeat } from 'immutable'\nimport { draftToMarkdown, markdownToDraft } from \"markdown-draft-js\";\nimport remarkablePlugin from \"./remarkablePlugin\";\n\nconst RichTextEditorMarkdown = ({ initialMarkdown, onEditorStateChange }) => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  // convert markdown to EditorState\n  useEffect(() => {\n    const rawDraftObj = markdownToDraft(initialMarkdown, {\n      remarkablePlugins: [remarkablePlugin],\n      blockTypes: {\n        warning_open: function (item) {\n          console.log('block type', item)\n          const charData = CharacterMetadata.create();\n          const text = ' '\n\n          console.log(new ContentBlock({\n            key: genKey(),\n            type: 'atomic',\n            depth: 0,\n            text,\n            characterList: List(Repeat(charData, text.length)),\n            inlineStyleRanges: List()\n          }))\n          return new ContentBlock({\n            key: genKey(),\n            type: 'atomic',\n            depth: 0,\n            text,\n            characterList: List(Repeat(charData, text.length)),\n            inlineStyleRanges: List()\n\n          });\n        },\n      },\n      blockEntities: {\n        warning_open: function (item) {\n          console.log('entitie', item)\n          return {\n            type: 'WARNING',\n            mutability: 'IMMUTABLE',\n            data: item\n          }\n        }\n      }\n    });\n    const newContentState = convertFromRaw(rawDraftObj);\n    const newEditorState = EditorState.createWithContent(newContentState);\n    const fixSelection = EditorState.moveSelectionToEnd(newEditorState);\n    setEditorState(fixSelection);\n  }, [initialMarkdown]);\n\n  // convert EditorState to markdown\n  const handleChange = newEditorState => {\n    const contentState = newEditorState.getCurrentContent();\n    const rawDraftObj = convertToRaw(contentState);\n    console.log({rawDraftObj})\n    const markdownFromEditorState = draftToMarkdown(rawDraftObj, {\n      entityItems: {\n        WARNING: {\n          open: function(entity) {\n            return ``;\n          },\n          close: function(entity) {\n            console.log(entity);\n            return `\n<warning>\n  ${entity.data}\n</warning>`;\n          }\n        }\n      }\n    });\n\n    setEditorState(newEditorState);\n    onEditorStateChange(markdownFromEditorState);\n  };\n\n  return (\n    <RichTextEditor\n      editorState={editorState}\n      onEditorStateChange={handleChange}\n    />\n  );\n};\n\nRichTextEditorMarkdown.propTypes = {\n  editorState: PropTypes.shape({}),\n  initialMarkdown: PropTypes.string,\n  onEditorStateChange: PropTypes.func\n};\n\nRichTextEditorMarkdown.defaultProps = {\n  editorState: EditorState.createEmpty(),\n  initialMarkdown: \"\",\n  onEditorStateChange: () => null\n};\n\nexport default RichTextEditorMarkdown;\n"]},"metadata":{},"sourceType":"module"}