{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useMemo, useRef } from 'react';\nimport useMountedState from './useMountedState';\nimport useUpdate from './useUpdate';\nimport useUpdateEffect from './useUpdateEffect';\nexport default function useStateList(stateSet) {\n  if (stateSet === void 0) {\n    stateSet = [];\n  }\n\n  var isMounted = useMountedState();\n  var update = useUpdate();\n  var index = useRef(0); // If new state list is shorter that before - switch to the last element\n\n  useUpdateEffect(function () {\n    if (stateSet.length <= index.current) {\n      index.current = stateSet.length - 1;\n      update();\n    }\n  }, [stateSet.length]);\n  var actions = useMemo(function () {\n    return {\n      next: function next() {\n        return actions.setStateAt(index.current + 1);\n      },\n      prev: function prev() {\n        return actions.setStateAt(index.current - 1);\n      },\n      setStateAt: function setStateAt(newIndex) {\n        // do nothing on unmounted component\n        if (!isMounted()) return; // do nothing on empty states list\n\n        if (!stateSet.length) return; // in case new index is equal current - do nothing\n\n        if (newIndex === index.current) return; // it gives the ability to travel through the left and right borders.\n        // 4ex: if list contains 5 elements, attempt to set index 9 will bring use to 5th element\n        // in case of negative index it will start counting from the right, so -17 will bring us to 4th element\n\n        index.current = newIndex >= 0 ? newIndex % stateSet.length : stateSet.length + newIndex % stateSet.length;\n        update();\n      },\n      setState: function setState(state) {\n        // do nothing on unmounted component\n        if (!isMounted()) return;\n        var newIndex = stateSet.length ? stateSet.indexOf(state) : -1;\n\n        if (newIndex === -1) {\n          throw new Error(\"State '\" + state + \"' is not a valid state (does not exist in state list)\");\n        }\n\n        index.current = newIndex;\n        update();\n      }\n    };\n  }, [stateSet]);\n  return __assign({\n    state: stateSet[index.current],\n    currentIndex: index.current\n  }, actions);\n}","map":null,"metadata":{},"sourceType":"module"}