{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/antoniojps/Documents/draftjs-markdown-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/ToolbarOption.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  left: 270px;\\n  top: 70px;\\n  width: auto;\\n  height: auto;\\n  padding: 1rem;\\n  background-color: white;\\n  border: 4px solid red;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useRef } from \"react\";\nimport { EditorState, AtomicBlockUtils } from \"draft-js\";\nimport PropTypes from \"prop-types\";\nimport { useToggle, useClickAway } from \"react-use\";\nimport styled from \"styled-components\";\n\nvar insertBlock = function insertBlock(editorState, onChange, _ref) {\n  var type = _ref.type,\n      data = _ref.data;\n  // create an entity\n  var contentState = editorState.getCurrentContent();\n  var contentStateWithEntity = contentState.createEntity(type, \"IMMUTABLE\", data);\n  var entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  var newEditorState = EditorState.set(editorState, {\n    currentContent: contentStateWithEntity\n  }); // insert a new atomic block with the entity and the correct markdown text\n\n  var newEditorStateWithBlock = AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, \" \");\n  onChange(newEditorStateWithBlock);\n};\n\nexport var ToolbarOption = function ToolbarOption(_ref2) {\n  var onChange = _ref2.onChange,\n      editorState = _ref2.editorState,\n      initialValues = _ref2.initialValues;\n\n  var _useToggle = useToggle(),\n      _useToggle2 = _slicedToArray(_useToggle, 2),\n      isOpen = _useToggle2[0],\n      toggle = _useToggle2[1];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useRef(null);\n  useClickAway(ref, function () {\n    if (isOpen) toggle();\n  });\n\n  var handleClick = function handleClick() {\n    toggle();\n  };\n\n  var addBlock = function addBlock() {\n    toggle();\n    insertBlock(editorState, onChange, {\n      type: \"WARNING\",\n      data: value\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"rdw-list-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Add Warning\")), isOpen && React.createElement(Modal, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: value,\n    onChange: function onChange(event) {\n      return setValue(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addBlock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Add\")));\n};\nvar Modal = styled.div(_templateObject());\nToolbarOption.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  editorState: PropTypes.shape({}).isRequired,\n  initialValues: PropTypes.shape({})\n};\nToolbarOption.defaultProps = {\n  initialValues: {}\n};\nexport default ToolbarOption;","map":{"version":3,"sources":["/Users/antoniojps/Documents/draftjs-markdown-editor/src/RichTextEditor/ToolbarOption.js"],"names":["React","useState","useRef","EditorState","AtomicBlockUtils","PropTypes","useToggle","useClickAway","styled","insertBlock","editorState","onChange","type","data","contentState","getCurrentContent","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","newEditorState","set","currentContent","newEditorStateWithBlock","insertAtomicBlock","ToolbarOption","initialValues","isOpen","toggle","value","setValue","ref","handleClick","addBlock","event","target","Modal","div","propTypes","func","isRequired","shape","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { EditorState, AtomicBlockUtils } from \"draft-js\";\nimport PropTypes from \"prop-types\";\nimport { useToggle, useClickAway } from \"react-use\";\nimport styled from \"styled-components\";\n\nconst insertBlock = (editorState, onChange, { type, data }) => {\n  // create an entity\n  const contentState = editorState.getCurrentContent();\n  const contentStateWithEntity = contentState.createEntity(\n    type,\n    \"IMMUTABLE\",\n    data\n  );\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  const newEditorState = EditorState.set(editorState, {\n    currentContent: contentStateWithEntity\n  });\n\n  // insert a new atomic block with the entity and the correct markdown text\n  const newEditorStateWithBlock = AtomicBlockUtils.insertAtomicBlock(\n    newEditorState,\n    entityKey,\n    \" \"\n  );\n  onChange(newEditorStateWithBlock);\n};\n\nexport const ToolbarOption = ({ onChange, editorState, initialValues }) => {\n  const [isOpen, toggle] = useToggle();\n  const [value, setValue] = useState();\n\n  const ref = useRef(null);\n  useClickAway(ref, () => {\n    if (isOpen) toggle();\n  });\n\n  const handleClick = () => {\n    toggle();\n  };\n\n  const addBlock = () => {\n    toggle();\n    insertBlock(editorState, onChange, { type: \"WARNING\", data: value });\n  };\n\n  return (\n    <>\n      <div className=\"rdw-list-wrapper\">\n        <button onClick={handleClick}>Add Warning</button>\n      </div>\n      {isOpen && (\n        <Modal ref={ref}>\n          <input\n            type=\"text\"\n            value={value}\n            onChange={event => setValue(event.target.value)}\n          />\n          <button onClick={addBlock}>Add</button>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nconst Modal = styled.div`\n  position: absolute;\n  left: 270px;\n  top: 70px;\n  width: auto;\n  height: auto;\n  padding: 1rem;\n  background-color: white;\n  border: 4px solid red;\n`;\n\nToolbarOption.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  editorState: PropTypes.shape({}).isRequired,\n  initialValues: PropTypes.shape({})\n};\n\nToolbarOption.defaultProps = {\n  initialValues: {}\n};\n\nexport default ToolbarOption;\n"]},"metadata":{},"sourceType":"module"}