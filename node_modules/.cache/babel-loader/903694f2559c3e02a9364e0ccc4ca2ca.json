{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useEffect, useState } from 'react';\nimport { off, on } from './util';\n\nvar getConnection = function getConnection() {\n  if (typeof navigator !== 'object') {\n    return null;\n  }\n\n  var nav = navigator;\n  return nav.connection || nav.mozConnection || nav.webkitConnection;\n};\n\nvar getConnectionState = function getConnectionState() {\n  var connection = getConnection();\n\n  if (!connection) {\n    return {};\n  }\n\n  var downlink = connection.downlink,\n      downlinkMax = connection.downlinkMax,\n      effectiveType = connection.effectiveType,\n      type = connection.type,\n      rtt = connection.rtt;\n  return {\n    downlink: downlink,\n    downlinkMax: downlinkMax,\n    effectiveType: effectiveType,\n    type: type,\n    rtt: rtt\n  };\n};\n\nvar useNetwork = function useNetwork(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var _a = useState(initialState),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var localState = state;\n\n    var localSetState = function localSetState(patch) {\n      localState = __assign(__assign({}, localState), patch);\n      setState(localState);\n    };\n\n    var connection = getConnection();\n\n    var onOnline = function onOnline() {\n      localSetState({\n        online: true,\n        since: new Date()\n      });\n    };\n\n    var onOffline = function onOffline() {\n      localSetState({\n        online: false,\n        since: new Date()\n      });\n    };\n\n    var onConnectionChange = function onConnectionChange() {\n      localSetState(getConnectionState());\n    };\n\n    on(window, 'online', onOnline);\n    on(window, 'offline', onOffline);\n\n    if (connection) {\n      on(connection, 'change', onConnectionChange);\n      localSetState(__assign(__assign(__assign({}, state), {\n        online: navigator.onLine,\n        since: undefined\n      }), getConnectionState()));\n    }\n\n    return function () {\n      off(window, 'online', onOnline);\n      off(window, 'offline', onOffline);\n\n      if (connection) {\n        off(connection, 'change', onConnectionChange);\n      }\n    };\n  }, []);\n  return state;\n};\n\nexport default useNetwork;","map":null,"metadata":{},"sourceType":"module"}