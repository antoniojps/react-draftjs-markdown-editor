{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useEffect, useState } from 'react';\n\nvar useGeolocation = function useGeolocation(options) {\n  var _a = useState({\n    loading: true,\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: Date.now()\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var mounted = true;\n  var watchId;\n\n  var onEvent = function onEvent(event) {\n    if (mounted) {\n      setState({\n        loading: false,\n        accuracy: event.coords.accuracy,\n        altitude: event.coords.altitude,\n        altitudeAccuracy: event.coords.altitudeAccuracy,\n        heading: event.coords.heading,\n        latitude: event.coords.latitude,\n        longitude: event.coords.longitude,\n        speed: event.coords.speed,\n        timestamp: event.timestamp\n      });\n    }\n  };\n\n  var onEventError = function onEventError(error) {\n    return mounted && setState(function (oldState) {\n      return __assign(__assign({}, oldState), {\n        loading: false,\n        error: error\n      });\n    });\n  };\n\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(onEvent, onEventError, options);\n    watchId = navigator.geolocation.watchPosition(onEvent, onEventError, options);\n    return function () {\n      mounted = false;\n      navigator.geolocation.clearWatch(watchId);\n    };\n  }, []);\n  return state;\n};\n\nexport default useGeolocation;","map":null,"metadata":{},"sourceType":"module"}