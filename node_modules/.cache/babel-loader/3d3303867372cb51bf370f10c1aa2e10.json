{"ast":null,"code":"import { useMemo } from 'react';\nimport useGetSet from './useGetSet';\nimport { resolveHookState } from './util/resolveHookState';\nexport default function useCounter(initialValue, max, min) {\n  if (initialValue === void 0) {\n    initialValue = 0;\n  }\n\n  if (max === void 0) {\n    max = null;\n  }\n\n  if (min === void 0) {\n    min = null;\n  }\n\n  var init = resolveHookState(initialValue);\n  typeof init !== 'number' && console.error('initialValue has to be a number, got ' + typeof initialValue);\n\n  if (typeof min === 'number') {\n    init = Math.max(init, min);\n  } else if (min !== null) {\n    console.error('min has to be a number, got ' + typeof min);\n  }\n\n  if (typeof max === 'number') {\n    init = Math.min(init, max);\n  } else if (max !== null) {\n    console.error('max has to be a number, got ' + typeof max);\n  }\n\n  var _a = useGetSet(init),\n      get = _a[0],\n      setInternal = _a[1];\n\n  return [get(), useMemo(function () {\n    var set = function set(newState) {\n      var prevState = get();\n      var rState = resolveHookState(newState, prevState);\n\n      if (prevState !== rState) {\n        if (typeof min === 'number') {\n          rState = Math.max(rState, min);\n        }\n\n        if (typeof max === 'number') {\n          rState = Math.min(rState, max);\n        }\n\n        prevState !== rState && setInternal(rState);\n      }\n    };\n\n    return {\n      get: get,\n      set: set,\n      inc: function inc(delta) {\n        if (delta === void 0) {\n          delta = 1;\n        }\n\n        var rDelta = resolveHookState(delta, get());\n\n        if (typeof rDelta !== 'number') {\n          console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n        }\n\n        set(function (num) {\n          return num + rDelta;\n        });\n      },\n      dec: function dec(delta) {\n        if (delta === void 0) {\n          delta = 1;\n        }\n\n        var rDelta = resolveHookState(delta, get());\n\n        if (typeof rDelta !== 'number') {\n          console.error('delta has to be a number or function returning a number, got ' + typeof rDelta);\n        }\n\n        set(function (num) {\n          return num - rDelta;\n        });\n      },\n      reset: function reset(value) {\n        if (value === void 0) {\n          value = init;\n        }\n\n        var rValue = resolveHookState(value, get());\n\n        if (typeof rValue !== 'number') {\n          console.error('value has to be a number or function returning a number, got ' + typeof rValue);\n        }\n\n        init = rValue;\n        set(rValue);\n      }\n    };\n  }, [init, min, max])];\n}","map":null,"metadata":{},"sourceType":"module"}