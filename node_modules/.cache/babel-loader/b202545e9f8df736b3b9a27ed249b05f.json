{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isClient, off, on } from './util';\n\nvar patchHistoryMethod = function patchHistoryMethod(method) {\n  var original = history[method];\n\n  history[method] = function (state) {\n    var result = original.apply(this, arguments);\n    var event = new Event(method.toLowerCase());\n    event.state = state;\n    window.dispatchEvent(event);\n    return result;\n  };\n};\n\nif (isClient) {\n  patchHistoryMethod('pushState');\n  patchHistoryMethod('replaceState');\n}\n\nvar useLocationServer = function useLocationServer() {\n  return {\n    trigger: 'load',\n    length: 1\n  };\n};\n\nvar buildState = function buildState(trigger) {\n  var state = history.state,\n      length = history.length;\n  var hash = location.hash,\n      host = location.host,\n      hostname = location.hostname,\n      href = location.href,\n      origin = location.origin,\n      pathname = location.pathname,\n      port = location.port,\n      protocol = location.protocol,\n      search = location.search;\n  return {\n    trigger: trigger,\n    state: state,\n    length: length,\n    hash: hash,\n    host: host,\n    hostname: hostname,\n    href: href,\n    origin: origin,\n    pathname: pathname,\n    port: port,\n    protocol: protocol,\n    search: search\n  };\n};\n\nvar useLocationBrowser = function useLocationBrowser() {\n  var _a = useState(buildState('load')),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var onPopstate = function onPopstate() {\n      return setState(buildState('popstate'));\n    };\n\n    var onPushstate = function onPushstate() {\n      return setState(buildState('pushstate'));\n    };\n\n    var onReplacestate = function onReplacestate() {\n      return setState(buildState('replacestate'));\n    };\n\n    on(window, 'popstate', onPopstate);\n    on(window, 'pushstate', onPushstate);\n    on(window, 'replacestate', onReplacestate);\n    return function () {\n      off(window, 'popstate', onPopstate);\n      off(window, 'pushstate', onPushstate);\n      off(window, 'replacestate', onReplacestate);\n    };\n  }, []);\n  return state;\n};\n\nvar hasEventConstructor = typeof Event === 'function';\nexport default isClient && hasEventConstructor ? useLocationBrowser : useLocationServer;","map":null,"metadata":{},"sourceType":"module"}