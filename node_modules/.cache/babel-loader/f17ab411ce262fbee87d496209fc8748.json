{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport default function useTimeoutFn(fn, ms) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  var ready = useRef(false);\n  var timeout = useRef();\n  var callback = useRef(fn);\n  var isReady = useCallback(function () {\n    return ready.current;\n  }, []);\n  var set = useCallback(function () {\n    ready.current = false;\n    timeout.current && clearTimeout(timeout.current);\n    timeout.current = setTimeout(function () {\n      ready.current = true;\n      callback.current();\n    }, ms);\n  }, [ms]);\n  var clear = useCallback(function () {\n    ready.current = null;\n    timeout.current && clearTimeout(timeout.current);\n  }, []); // update ref when function changes\n\n  useEffect(function () {\n    callback.current = fn;\n  }, [fn]); // set on mount, clear on unmount\n\n  useEffect(function () {\n    set();\n    return clear;\n  }, [ms]);\n  return [isReady, clear, set];\n}","map":null,"metadata":{},"sourceType":"module"}