{"ast":null,"code":"'use strict';\n\nvar removeRule = require('./vcssom/removeRule').removeRule;\n\nexports.addon = function (renderer) {\n  // VCSSOM support only browser environment.\n  if (!renderer.client) return;\n\n  if (process.env.NODE_ENV !== 'production') {\n    require('./__dev__/warnOnMissingDependencies')('cssom', renderer, ['createRule']); // cssom\n\n  }\n\n  var kebab = renderer.kebab;\n\n  function VRule(selector, prelude) {\n    this.rule = renderer.createRule(selector, prelude);\n    this.decl = {};\n  }\n\n  VRule.prototype.diff = function (newDecl) {\n    var oldDecl = this.decl;\n    var style = this.rule.style;\n    var property;\n\n    for (property in oldDecl) {\n      if (newDecl[property] === undefined) style.removeProperty(property);\n    }\n\n    for (property in newDecl) {\n      if (newDecl[property] !== oldDecl[property]) style.setProperty(kebab(property), newDecl[property]);\n    }\n\n    this.decl = newDecl;\n  };\n\n  VRule.prototype.del = function () {\n    removeRule(this.rule);\n  };\n\n  function VSheet() {\n    /**\n     * {\n     *   '<at-rule-prelude>': {\n     *     '<selector>': {\n     *       color: 'red\n     *     }\n     *   }\n     * }\n     */\n    this.tree = {};\n  }\n\n  VSheet.prototype.diff = function (newTree) {\n    var oldTree = this.tree; // Remove media queries not present in new tree.\n\n    for (var prelude in oldTree) {\n      if (newTree[prelude] === undefined) {\n        var rules = oldTree[prelude];\n\n        for (var selector in rules) {\n          rules[selector].del();\n        }\n      }\n    }\n\n    for (var prelude in newTree) {\n      if (oldTree[prelude] === undefined) {\n        // Whole media query is new.\n        for (var selector in newTree[prelude]) {\n          var rule = new VRule(selector, prelude);\n          rule.diff(newTree[prelude][selector]);\n          newTree[prelude][selector] = rule;\n        }\n      } else {\n        // Old tree already has rules with this media query.\n        var oldRules = oldTree[prelude];\n        var newRules = newTree[prelude]; // Remove rules not present in new tree.\n\n        for (var selector in oldRules) {\n          if (!newRules[selector]) oldRules[selector].del();\n        } // Apply new rules.\n\n\n        for (var selector in newRules) {\n          var rule = oldRules[selector];\n\n          if (rule) {\n            rule.diff(newRules[selector]);\n            newRules[selector] = rule;\n          } else {\n            rule = new VRule(selector, prelude);\n            rule.diff(newRules[selector]);\n            newRules[selector] = rule;\n          }\n        }\n      }\n    }\n\n    this.tree = newTree;\n  };\n\n  renderer.VRule = VRule;\n  renderer.VSheet = VSheet;\n};","map":null,"metadata":{},"sourceType":"script"}