{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { Remarkable } from 'remarkable';\nvar TRAILING_NEW_LINE = /\\n$/; // In DraftJS, string lengths are calculated differently than in JS itself (due\n// to surrogate pairs). Instead of importing the entire UnicodeUtils file from\n// FBJS, we use a simpler alternative, in the form of `Array.from`.\n//\n// Alternative:  const { strlen } = require('fbjs/lib/UnicodeUtils');\n\nfunction strlen(str) {\n  return Array.from(str).length;\n} // Block level items, key is Remarkable's key for them, value returned is\n// A function that generates the raw draftjs key and block data.\n//\n// Why a function? Because in some cases (headers) we need additional information\n// before we can determine the exact key to return. And blocks may also return data\n\n\nvar DefaultBlockTypes = {\n  paragraph_open: function paragraph_open(item) {\n    return {\n      type: 'unstyled',\n      text: '',\n      entityRanges: [],\n      inlineStyleRanges: []\n    };\n  },\n  blockquote_open: function blockquote_open(item) {\n    return {\n      type: 'blockquote',\n      text: ''\n    };\n  },\n  ordered_list_item_open: function ordered_list_item_open() {\n    return {\n      type: 'ordered-list-item',\n      text: ''\n    };\n  },\n  unordered_list_item_open: function unordered_list_item_open() {\n    return {\n      type: 'unordered-list-item',\n      text: ''\n    };\n  },\n  fence: function fence(item) {\n    return {\n      type: 'code-block',\n      data: {\n        language: item.params || ''\n      },\n      text: (item.content || '').replace(TRAILING_NEW_LINE, ''),\n      // remarkable seems to always append an erronious trailing newline to its codeblock content, so we need to trim it out.\n      entityRanges: [],\n      inlineStyleRanges: []\n    };\n  },\n  heading_open: function heading_open(item) {\n    var type = 'header-' + {\n      1: 'one',\n      2: 'two',\n      3: 'three',\n      4: 'four',\n      5: 'five',\n      6: 'six'\n    }[item.hLevel];\n    return {\n      type: type,\n      text: ''\n    };\n  }\n}; // Entity types. These are things like links or images that require\n// additional data and will be added to the `entityMap`\n// again. In this case, key is remarkable key, value is\n// meethod that returns the draftjs key + any data needed.\n\nvar DefaultBlockEntities = {\n  link_open: function link_open(item) {\n    return {\n      type: 'LINK',\n      mutability: 'MUTABLE',\n      data: {\n        url: item.href,\n        href: item.href\n      }\n    };\n  }\n}; // Entity styles. Simple Inline styles that aren't added to entityMap\n// key is remarkable key, value is draftjs raw key\n\nvar DefaultBlockStyles = {\n  strong_open: 'BOLD',\n  em_open: 'ITALIC',\n  code: 'CODE'\n}; // Key generator for entityMap items\n\nvar idCounter = -1;\n\nfunction generateUniqueKey() {\n  idCounter++;\n  return idCounter;\n}\n/*\n * Handle inline content in a block level item\n * parses for BlockEntities (links, images) and BlockStyles (em, strong)\n * doesn't handle block level items (blockquote, ordered list, etc)\n *\n * @param <Object> inlineItem - single object from remarkable data representation of markdown\n * @param <Object> BlockEntities - key-value object of mappable block entity items. Passed in as param so users can include their own custom stuff\n * @param <Object> BlockStyles - key-value object of mappable block styles items. Passed in as param so users can include their own custom stuff\n *\n * @return <Object>\n *  content: Entire text content for the inline item,\n *  blockEntities: New block eneities to be added to global block entity map\n *  blockEntityRanges: block-level representation of block entities including key to access the block entity from the global map\n *  blockStyleRanges: block-level representation of styles (eg strong, em)\n*/\n\n\nfunction parseInline(inlineItem, BlockEntities, BlockStyles) {\n  var content = '',\n      blockEntities = {},\n      blockEntityRanges = [],\n      blockInlineStyleRanges = [];\n  inlineItem.children.forEach(function (child) {\n    if (child.type === 'text') {\n      content += child.content;\n    } else if (child.type === 'softbreak') {\n      content += '\\n';\n    } else if (child.type === 'hardbreak') {\n      content += '\\n';\n    } else if (BlockStyles[child.type]) {\n      var key = generateUniqueKey();\n      var styleBlock = {\n        offset: strlen(content) || 0,\n        length: 0,\n        style: BlockStyles[child.type]\n      }; // Edge case hack because code items don't have inline content or open/close, unlike everything else\n\n      if (child.type === 'code') {\n        styleBlock.length = strlen(child.content);\n        content += child.content;\n      }\n\n      blockInlineStyleRanges.push(styleBlock);\n    } else if (BlockEntities[child.type]) {\n      var key = generateUniqueKey();\n      blockEntities[key] = BlockEntities[child.type](child);\n      blockEntityRanges.push({\n        offset: strlen(content) || 0,\n        length: 0,\n        key: key\n      });\n    } else if (child.type.indexOf('_close') !== -1 && BlockEntities[child.type.replace('_close', '_open')]) {\n      blockEntityRanges[blockEntityRanges.length - 1].length = strlen(content) - blockEntityRanges[blockEntityRanges.length - 1].offset;\n    } else if (child.type.indexOf('_close') !== -1 && BlockStyles[child.type.replace('_close', '_open')]) {\n      var type = BlockStyles[child.type.replace('_close', '_open')];\n      blockInlineStyleRanges = blockInlineStyleRanges.map(function (style) {\n        if (style.length === 0 && style.style === type) {\n          style.length = strlen(content) - style.offset;\n        }\n\n        return style;\n      });\n    }\n  });\n  return {\n    content: content,\n    blockEntities: blockEntities,\n    blockEntityRanges: blockEntityRanges,\n    blockInlineStyleRanges: blockInlineStyleRanges\n  };\n}\n/**\n * Convert markdown into raw draftjs object\n *\n * @param {String} markdown - markdown to convert into raw draftjs object\n * @param {Object} options - optional additional data, see readme for what options can be passed in.\n *\n * @return {Object} rawDraftObject\n**/\n\n\nfunction markdownToDraft(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var remarkablePreset = options.remarkablePreset || options.remarkableOptions;\n  var remarkableOptions = _typeof(options.remarkableOptions) === 'object' ? options.remarkableOptions : null;\n  var md = new Remarkable(remarkablePreset, remarkableOptions); // if tables are not explicitly enabled, disable them by default\n\n  if (!remarkableOptions || !remarkableOptions.enable || !remarkableOptions.enable.block || remarkableOptions.enable.block !== 'table' || remarkableOptions.enable.block.includes('table') === false) {\n    md.block.ruler.disable('table');\n  } // disable the specified rules\n\n\n  if (remarkableOptions && remarkableOptions.disable) {\n    for (var _i = 0, _Object$entries = Object.entries(remarkableOptions.disable); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n\n      md[key].ruler.disable(value);\n    }\n  } // enable the specified rules\n\n\n  if (remarkableOptions && remarkableOptions.enable) {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(remarkableOptions.enable); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          _key = _Object$entries2$_i[0],\n          _value = _Object$entries2$_i[1];\n\n      md[_key].ruler.enable(_value);\n    }\n  } // If users want to define custom remarkable plugins for custom markdown, they can be added here\n\n\n  if (options.remarkablePlugins) {\n    options.remarkablePlugins.forEach(function (plugin) {\n      md.use(plugin, {});\n    });\n  }\n\n  var blocks = []; // blocks will be returned as part of the final draftjs raw object\n\n  var entityMap = {}; // entitymap will be returned as part of the final draftjs raw object\n\n  var parsedData = md.parse(string, {}); // remarkable js takes markdown and makes it an array of style objects for us to easily parse\n\n  var currentListType = null; // Because of how remarkable's data is formatted, we need to cache what kind of list we're currently dealing with\n\n  var previousBlockEndingLine = 1; // Allow user to define custom BlockTypes and Entities if they so wish\n\n  var BlockTypes = Object.assign({}, DefaultBlockTypes, options.blockTypes || {});\n  var BlockEntities = Object.assign({}, DefaultBlockEntities, options.blockEntities || {});\n  var BlockStyles = Object.assign({}, DefaultBlockStyles, options.blockStyles || {});\n  parsedData.forEach(function (item) {\n    // Because of how remarkable's data is formatted, we need to cache what kind of list we're currently dealing with\n    if (item.type === 'bullet_list_open') {\n      currentListType = 'unordered_list_item_open';\n    } else if (item.type === 'ordered_list_open') {\n      currentListType = 'ordered_list_item_open';\n    }\n\n    var itemType = item.type;\n\n    if (itemType === 'list_item_open') {\n      itemType = currentListType;\n    }\n\n    if (itemType === 'inline') {\n      // Parse inline content and apply it to the most recently created block level item,\n      // which is where the inline content will belong.\n      var _parseInline = parseInline(item, BlockEntities, BlockStyles),\n          content = _parseInline.content,\n          blockEntities = _parseInline.blockEntities,\n          blockEntityRanges = _parseInline.blockEntityRanges,\n          blockInlineStyleRanges = _parseInline.blockInlineStyleRanges;\n\n      var blockToModify = blocks[blocks.length - 1];\n      blockToModify.text = content;\n      blockToModify.inlineStyleRanges = blockInlineStyleRanges;\n      blockToModify.entityRanges = blockEntityRanges; // The entity map is a master object separate from the block so just add any entities created for this block to the master object\n\n      Object.assign(entityMap, blockEntities);\n    } else if ((itemType.indexOf('_open') !== -1 || itemType === 'fence' || itemType === 'hr') && BlockTypes[itemType]) {\n      var depth = 0;\n      var block;\n\n      if (item.level > 0) {\n        depth = Math.floor(item.level / 2);\n      } // Draftjs only supports 1 level of blocks, hence the item.level === 0 check\n      // List items will always be at least `level==1` though so we need a separate check for that\n      // If there’s nested block level items deeper than that, we need to make sure we capture this by cloning the topmost block\n      // otherwise we’ll accidentally overwrite its text. (eg if there's a blockquote with 3 nested paragraphs with inline text, without this check, only the last paragraph would be reflected)\n\n\n      if (item.level === 0 || item.type === 'list_item_open') {\n        block = Object.assign({\n          depth: depth\n        }, BlockTypes[itemType](item));\n      } else if (item.level > 0 && blocks[blocks.length - 1].text) {\n        block = Object.assign({}, blocks[blocks.length - 1]);\n      }\n\n      if (block && options.preserveNewlines) {\n        // Re: previousBlockEndingLine.... omg.\n        // So remarkable strips out empty newlines and doesn't make any entities to parse to restore them\n        // the only solution I could find is that there's a 2-value array on each block item called \"lines\" which is the start end line of the block element.\n        // by keeping track of the PREVIOUS block element ending line and the NEXT block element starting line, we can find the difference between the new lines and insert\n        // an appropriate number of extra paragraphs to re-create those newlines in draftjs.\n        // This is probably my least favourite thing in this file, but not sure what could be better.\n        if (previousBlockEndingLine) {\n          var totalEmptyParagraphsToCreate = item.lines[0] - previousBlockEndingLine;\n\n          for (var i = 0; i < totalEmptyParagraphsToCreate; i++) {\n            blocks.push(DefaultBlockTypes.paragraph_open());\n          }\n        }\n      }\n\n      if (block) {\n        previousBlockEndingLine = item.lines[1] + 1;\n        blocks.push(block);\n      }\n    }\n  }); // EditorState.createWithContent will error if there's no blocks defined\n  // Remarkable returns an empty array though. So we have to generate a 'fake'\n  // empty block in this case. 😑\n\n  if (!blocks.length) {\n    blocks.push(DefaultBlockTypes.paragraph_open());\n  }\n\n  return {\n    entityMap: entityMap,\n    blocks: blocks\n  };\n}\n\nexport default markdownToDraft;","map":null,"metadata":{},"sourceType":"module"}